# Imports here
%matplotlib inline
%config InlineBackend.figure_format = 'retina'

import torch
import json
import matplotlib.pyplot as plt
from torch import nn, optim
from torchvision import datasets, transforms, models
import torch.nn.functional as F

from PIL import Image
import numpy as np
import seaborn as sb


data_dir = 'flowers'
train_dir = data_dir + '/train'
valid_dir = data_dir + '/valid'
test_dir = data_dir + '/test'

# TODO: Define your transforms for the training, validation, and testing sets
train_data_transforms =  transforms.Compose([transforms.RandomRotation(20),
                                       transforms.RandomResizedCrop(224),
                                       transforms.RandomHorizontalFlip(),
                                       transforms.ToTensor(),
                                       transforms.Normalize([0.485, 0.456, 0.406],
                                                            [0.229, 0.224, 0.225])])
test_data_transforms = transforms.Compose([transforms.Resize(255), transforms.CenterCrop(224), transforms.ToTensor(),
                                transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))])

# TODO: Load the datasets with ImageFolder
image_datasets = datasets.ImageFolder(data_dir, transform = test_data_transforms)
train_datasets = datasets.ImageFolder(train_dir, transform = train_data_transforms)
valid_datasets = datasets.ImageFolder(valid_dir, transform = train_data_transforms)
test_datasets = datasets.ImageFolder(test_dir, transform = test_data_transforms)

# TODO: Using the image datasets and the trainforms, define the dataloaders
trainloader = torch.utils.data.DataLoader(train_datasets, batch_size = 64, shuffle = True)
testloader = torch.utils.data.DataLoader(test_datasets, batch_size = 64, shuffle = True) 
validloader = torch.utils.data.DataLoader(valid_datasets, batch_size = 64, shuffle = True)


with open('cat_to_name.json', 'r') as f:
    cat_to_name = json.load(f)
    
    
    
    # TODO: Build your network
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = models.vgg11(pretrained = True)

learn_rate = 0.002
architecture ='vggll'
input_size = 25088
output_size = 102
hidden_size1 = 256
hidden_size2 = 128
epochs = 5
drop_rate = .2
optimizer = 'Adam'
for param in model.parameters():
    param.requires_grad = False
    
model.classifier = nn.Sequential(nn.Linear(input_size, hidden_size1),
                               nn.ReLU(),
                               nn.Dropout(drop_rate),
                               nn.Linear(hidden_size1, hidden_size2),
                               nn.ReLU(),
                               nn.Linear(hidden_size2,output_size),
                               nn.LogSoftmax(dim=1))
criterion = nn.NLLLoss()

optimizer = optim.Adam(model.classifier.parameters(), lr = learn_rate)
model.to(device)


#Train the model 
step = 0
for e in range(epochs):
    running_loss = 0
    # training model on training data that's has rotations, etc. done to it
    for images, labels in validloader:
        images, labels = images.to('cuda'), labels.to('cuda')
        optimizer.zero_grad()
        log_ps = model.forward(images)
        loss = criterion(log_ps, labels)
        loss.backward()
        optimizer.step()
        running_loss += loss.item()
        step += 1
    else:
        print("Epoch:  {}/{}.. ".format(e+1, epochs), "Training Loss: {:.3f}.. ".format(running_loss/(step*len(validloader))))
        
        
        # validate against images that simply normalized
valid_losses = []
for e in range(epochs):
    valid_loss = 0
    accuracy = 0
    with torch.no_grad():
        for images, labels in testloader:
            images, labels = images.to('cuda'), labels.to('cuda')
            logps = model(images)
            valid_loss += criterion(logps, labels)

            ps = torch.exp(logps)
            top_p, top_class = ps.topk(1, dim=1)
            equals = top_class == labels.view(*top_class.shape)
            accuracy += torch.mean(equals.type(torch.FloatTensor))
            
    valid_losses.append(valid_loss/len(testloader))

    print("Epoch:  {}/{}.. ".format(e+1, epochs),
              "Validation Loss: {:.3f}.. ".format(valid_loss/(len(testloader))),
              "Accuracy: {:.3f}".format(accuracy/len(testloader)))
