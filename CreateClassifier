# Imports here
%matplotlib inline
%config InlineBackend.figure_format = 'retina'

import torch
import matplotlib.pyplot as plt
from torch import nn, optim
from torchvision import datasets, transforms, models
import torch.nn.functional as F

data_dir = 'flowers'
train_dir = data_dir + '/train'
valid_dir = data_dir + '/valid'
test_dir = data_dir + '/test'

# TODO: Define your transforms for the training, validation, and testing sets
train_data_transforms =  transforms.Compose([transforms.RandomRotation(20),
                                       transforms.RandomResizedCrop(224),
                                       transforms.RandomHorizontalFlip(),
                                       transforms.ToTensor(),
                                       transforms.Normalize([0.485, 0.456, 0.406],
                                                            [0.229, 0.224, 0.225])])
test_data_transforms = transforms.Compose([transforms.Resize(255), transforms.CenterCrop(224), transforms.ToTensor(),
                                transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))])

# TODO: Load the datasets with ImageFolder
image_datasets = datasets.ImageFolder(data_dir, transform = test_data_transforms)
train_datasets = datasets.ImageFolder(train_dir, transform = train_data_transforms)
valid_datasets = datasets.ImageFolder(valid_dir, transform = test_data_transforms)
test_datasets = datasets.ImageFolder(test_dir, transform = test_data_transforms)

# TODO: Using the image datasets and the trainforms, define the dataloaders
trainloader = torch.utils.data.DataLoader(train_datasets, batch_size = 64, shuffle = True)
testloader = torch.utils.data.DataLoader(test_datasets, batch_size = 64, shuffle = True) 
validloader = torch.utils.data.DataLoader(valid_datasets, batch_size = 64) 

import json

with open('cat_to_name.json', 'r') as f:
    cat_to_name = json.load(f)
    
   # TODO: Build and train your network
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = models.vgg11(pretrained = True)
for param in model.parameters():
    param.requires_grad = False
    
model.classifier = nn.Sequential(nn.Linear(25088, 4096),
                               nn.ReLU(),
                               nn.Dropout(.3),
                               nn.Linear(4096, 1024),
                               nn.ReLU(),
                               nn.Linear(1024,102),
                               nn.LogSoftmax(dim=1))
criterion = nn.NLLLoss()
optimizer = optim.Adam(model.classifier.parameters(), lr = 0.002)
model.to(device)

step = 0 #new
epochs = 3
running_loss = 0
for e in range(epochs):
    for images, labels in trainloader:
        images, labels = images.to('cuda'), labels.to('cuda')
        optimizer.zero_grad()
        log_ps = model(images)
        loss = criterion(log_ps, labels)
        
        loss.backward()
        optimizer.step()
        running_loss += loss.item()
        step += 1
        
# TODO: Do validation on the test set
    else:
        test_loss = 0
        accuracy = 0
        train_losses, test_losses = [], []
        model.eval() #moved this from under the 'width'
        with torch.no_grad():
            
            for images, labels in validloader:
                images, labels = images.to('cuda'), labels.to('cuda')
                logps = model(images)
                loss = criterion(logps, labels)
                test_loss += loss.item()
                ps = torch.exp(logps)
                top_p, top_class = ps.topk(1, dim=1)
                equals = top_class == labels.view(*top_class.shape)
                accuracy += torch.mean(equals.type(torch.FloatTensor))
        model.train()

        test_losses.append(test_loss/len(testloader))
        train_losses.append(running_loss/len(trainloader))

        print("Epoch:  {}/{}.. ".format(e+1, epochs),
              "Training Loss: {:.3f}.. ".format(running_loss/(step*len(trainloader))),
              "Test Loss: {:.3f}.. ".format(test_loss/len(testloader)),
              "Test Accuracy: {:.3f}".format(accuracy/len(validloader)))
              
              
              # TODO: Save the checkpoint 
model.class_to_idx = image_datasets.class_to_idx
checkpoint = {'classifier': model.classifier,
              'optimizer.state_dict':optimizer.state_dict(),
              'class_to_idx': model.class_to_idx,
              'state_dict': model.classifier.state_dict()}
torch.save(checkpoint, 'checkpoint.pth')

# TODO: Write a function that loads a checkpoint and rebuilds the model
def load_checkpoint(filepath):
    checkpoint = torch.load(filepath)
    model = models.vgg11(pretrained = True)
    optimizer = optim.Adam(model.classifier.parameters(), lr = 0.002)
    for param in model.parameters():
        param.requires_grad = False  
        
    model.classifier = checkpoint['classifier']
    model.class_to_idx = checkpoint['class_to_idx']
    model.load_state_dict(checkpoint['state_dict'])
    optimizer.load_state_dict(checkpoint['optimizer.state_dict'])                    
    return model

new_model = load_checkpoint('checkpoint.pth')

from PIL import Image
import numpy as np
def process_image(image):
    ''' Scales, crops, and normalizes a PIL image for a PyTorch model,
        returns an Numpy array
    '''
    # TODO: Process a PIL image for use in a PyTorch model
    im = Image.open(image)
#1.resize the images where the shortest side is 256 pixels, keeping the aspect ratio.
    resize_dim = (256,256)
    new_im = im.resize(resize_dim)
#2.Crop image to center at 224, 224.
    box_dim = 224
    left = new_im.size[1]//2 - box_dim//2
    right = new_im.size[0]//2 - box_dim//2
    top = new_im.size[1]//2 + box_dim//2
    bottom = new_im.size[0] + box_dim//2
        
    new_im = im.crop((left, top, right, bottom))
       
    
#3.Convert the image into numpy array.
    np_image = np.array(new_im)
    np_image = np_image/255
#4.Normalize image subtracting mean and dividing by Standard Deviation.
    means = np.array([0.485, 0.456, 0.406])
    std = np.array([0.229, 0.224, 0.225])
    norm_img = np.array([])
    norm_img = np_image - means
    norm_img = norm_img / std

#5.return transpose of numpy image with color channel at first dim.
    trans_img = norm_img.transpose((1,2,0))

#6.Convert 3D numpy array into 4D numpy array using np.expand_dims.
    img_4d = np.expand_dims(trans_img, axis = 0)
#7.Convert numpy array into image tensor before passing over to model for forward pass using torch.from_numpy.
    img_4d = torch.from_numpy(img_4d).float()
    return img_4d
    
def imshow(image, ax=None, title=None):
    """Imshow for Tensor."""
    if ax is None:
        fig, ax = plt.subplots()
    
    # PyTorch tensors assume the color channel is the first dimension
    # but matplotlib assumes is the third dimension
    image = image.numpy().transpose((1, 2, 0))
    
    # Undo preprocessing
    mean = np.array([0.485, 0.456, 0.406])
    std = np.array([0.229, 0.224, 0.225])
    image = std * image + mean
    
    # Image needs to be clipped between 0 and 1 or it looks like noise when displayed
    image = np.clip(image, 0, 1)
    
    ax.imshow(image)
    
    return ax
    
def predict(image_path, model, topk=5):
    ''' Predict the class (or classes) of an image using a trained deep learning model.
    '''
    
    # TODO: Implement the code to predict the class from an image file
    model.eval()
    with torch.no_grad():
         
        #Process image
        pro_sample = process_image(image_path)
        
        #Run processed image through model to get labels and probs
        label = model.forward(pro_sample)
        ps = torch.exp(label)
        
        #Get Top K values
        top_p, top_class = ps.topk(1,dim=1)
        
        #Invert dictionary
        inverted_dict = dict(map(reversed, model.class_to_idx ))
        
        #Turn probs to floats
        probs = [float(prob) for prob in top_p[0]]
        
        #Grab associated classes as ints
        classes = [inverted_dict[int(index)] for index in top_class[0]]
                             
        return probs, classes                     
                
probs, classes = predict("flowers/valid/1/image_06739.jpg", new_model)
print(probs)
print(classes)    
